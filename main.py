import logging
import sqlite3
import uuid
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.formatting import Text
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
import google.generativeai as genai
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import asyncio
from aiogram.types import CallbackQuery
import os
import warnings
from aiogram.types import Message
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
import calendar
from contextlib import contextmanager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime, timedelta
from pytz import timezone
import re
import docx

TIMEZONE = timezone('Asia/Almaty')
warnings.filterwarnings("ignore", message="Timezone offset does not match system offset")

BOT_TOKEN = '7840665570:AAGQK-0rG6SaZYuNpEE9w2G9WjgmbHcgCrY'
GEMINI_API_KEYS = [
    'AIzaSyDDmhZ5byN13zbgC35Hlp4YLQYh-xiLCGc'
]
current_api_key_index = 0
ASSIGNMENTS_PER_PAGE = 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ API-–∫–ª—é—á–∞
def get_current_api_key():
    global current_api_key_index
    api_key = GEMINI_API_KEYS[current_api_key_index]
    current_api_key_index = (current_api_key_index + 1) % len(GEMINI_API_KEYS)
    return api_key

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_current_api_key –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ API-–∫–ª—é—á–∞
# –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ GenerativeModel
GEMINI_API_KEY = get_current_api_key()
genai.configure(api_key=GEMINI_API_KEY)

# –û–±–Ω–æ–≤–∏—Ç–µ API-–∫–ª—é—á –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
def update_api_key():
    global GEMINI_API_KEY
    GEMINI_API_KEY = get_current_api_key()
    genai.configure(api_key=GEMINI_API_KEY)


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

model = genai.GenerativeModel('gemini-1.5-flash')

generation_config = {
    "temperature": 0.9,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 2048,
}

safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
]


chat = model.start_chat(history=[])

scheduler = AsyncIOScheduler(timezone=TIMEZONE)

class UserStates(StatesGroup):
    waiting_for_user_type = State()
    waiting_for_user_name = State()
    waiting_for_class_name = State()
    waiting_for_class_selection = State()
    waiting_for_assignment = State()
    waiting_for_deadline_year = State()
    waiting_for_deadline_month = State()
    waiting_for_deadline_day = State()
    waiting_for_deadline_time = State()
    waiting_for_submission = State()
    waiting_for_assignment_method = State()
    editing_profile = State()
    waiting_for_user_type = State()
    waiting_for_generation_request = State()
    waiting_for_generation_choice = State()
    waiting_for_custom_deadline = State()
    waiting_for_deadline = State()
@contextmanager
def get_db_connection():
    conn = sqlite3.connect('education_bot.db')
    try:
        yield conn
    finally:
        conn.close()

def init_db():
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS teachers
                     (id INTEGER PRIMARY KEY, name TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS students
                     (id INTEGER PRIMARY KEY, name TEXT, class_id INTEGER)''')
        c.execute('''CREATE TABLE IF NOT EXISTS classes
                     (id INTEGER PRIMARY KEY, teacher_id INTEGER, class_name TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS assignments
                     (id INTEGER PRIMARY KEY, class_id INTEGER, text TEXT, deadline DATETIME)''')
        c.execute('''CREATE TABLE IF NOT EXISTS submissions
                     (id INTEGER PRIMARY KEY, assignment_id INTEGER, student_id INTEGER, 
                      answer TEXT, evaluation REAL, feedback TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS links
                     (id INTEGER PRIMARY KEY, class_id INTEGER, link TEXT)''')
        conn.commit()

def show_links(user_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º class_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã students
        c.execute("SELECT class_id FROM students WHERE id = ?", (user_id,))
        class_id = c.fetchone()[0]
        
        # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã links –ø–æ class_id
        c.execute("SELECT link FROM links WHERE class_id = ?", (class_id,))
        link = c.fetchone()[0]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
        return link

# Database operations
def add_student(student_id, name, class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("INSERT INTO students (id, name, class_id) VALUES (?, ?, ?)",
                  (student_id, name, class_id))
        conn.commit()

def is_teacher(user_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT id FROM teachers WHERE id = ?", (user_id,))
        return c.fetchone() is not None

def get_teacher_classes(teacher_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT id, class_name FROM classes WHERE teacher_id = ?", (teacher_id,))
        return c.fetchall()

def get_student_class(student_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT class_id FROM students WHERE id = ?", (student_id,))
        result = c.fetchone()
        return result[0] if result else None

def get_class_assignments(class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT id, text, deadline FROM assignments WHERE class_id = ? ORDER BY id DESC", (class_id,))
        assignments = c.fetchall()
        logger.info(f"Retrieved assignments for class {class_id}: {assignments}")
        return assignments

def prepare_assignment(class_id, text, deadline=None):
    if text is None or text.strip() == "":
        logger.error("Attempt to prepare assignment with None or empty text")
        return None
    
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT MAX(id) FROM assignments WHERE class_id = ?", (class_id,))
        max_id = c.fetchone()[0]
        assignment_id = max_id + 1 if max_id is not None else 1

    return {
        'class_id': class_id,
        'id': assignment_id,
        'text': text,
        'deadline': deadline
    }


def add_assignment(class_id, text, deadline):
    if text is None:
        logger.error("Attempt to add assignment with None text")
        return None
    
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT MAX(id) FROM assignments WHERE class_id = ?", (class_id,))
        max_id = c.fetchone()[0]
        assignment_id = max_id + 1 if max_id is not None else 1
        c.execute("INSERT INTO assignments (class_id, id, text, deadline) VALUES (?, ?, ?, ?)",
                  (class_id, assignment_id, text, deadline))
        conn.commit()

        return assignment_id

def add_submission(assignment_id, student_id, answer, evaluation, feedback):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""INSERT INTO submissions 
                     (assignment_id, student_id, answer, evaluation, feedback) 
                     VALUES (?, ?, ?, ?, ?)""",
                  (assignment_id, student_id, answer, evaluation, feedback))
        conn.commit()

def get_class_students(class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT id, name FROM students WHERE class_id = ?", (class_id,))
        return c.fetchall()

def get_teacher_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å")
    builder.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    builder.button(text="üìö –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
    builder.button(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞")
    builder.button(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
    builder.button(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_student_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    builder.button(text="üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
    builder.button(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_calendar_keyboard(year, month):
    builder = InlineKeyboardBuilder()
    month_calendar = calendar.monthcalendar(year, month)
    
    builder.row(InlineKeyboardButton(
        text=f"{calendar.month_name[month]} {year}",
        callback_data="ignore"
    ))
    
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    for day in days:
        builder.add(InlineKeyboardButton(text=day, callback_data="ignore"))
    builder.adjust(7)
    
    for week in month_calendar:
        for day in week:
            if day == 0:
                builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                builder.add(InlineKeyboardButton(
                    text=str(day),
                    callback_data=f"date:{year}:{month}:{day}"
                ))
    builder.adjust(7)
    
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"month:{prev_year}:{prev_month}"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"month:{next_year}:{next_month}")
    )
    
    return builder.as_markup()

# Command handlers
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    args = message.text.split()[1:] if len(message.text.split()) > 1 else None
    
    if args:  
        class_id = args[0]
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –∫–ª–∞—Å—Å—É. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        await state.set_state(UserStates.waiting_for_user_name)
        await state.update_data(class_id=class_id)
    else:  
        profile = get_user_profile(message.from_user.id)
        if profile:
            keyboard = get_teacher_keyboard() if profile['type'] == 'teacher' else get_student_keyboard()
            await message.reply(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {profile['name']}!", reply_markup=keyboard)
        else:
            await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—á–∏—Ç–µ–ª—å –∏–ª–∏ —É—á–µ–Ω–∏–∫? (–í–≤–µ–¥–∏—Ç–µ '—É—á–∏—Ç–µ–ª—å' –∏–ª–∏ '—É—á–µ–Ω–∏–∫')")
            await state.set_state(UserStates.waiting_for_user_type)

@dp.message(UserStates.waiting_for_user_type)
async def process_user_type(message: types.Message, state: FSMContext):
    user_type = message.text.lower().strip()
    if user_type in ['—É—á–∏—Ç–µ–ª—å', '—É—á–µ–Ω–∏–∫']:
        await state.update_data(user_type=user_type)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(UserStates.waiting_for_user_name)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '—É—á–∏—Ç–µ–ª—å' –∏–ª–∏ '—É—á–µ–Ω–∏–∫'.")

@dp.message(UserStates.waiting_for_user_name)
async def process_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    class_id = data.get('class_id')
    user_type = data.get('user_type')
    
    try:
        if class_id:  
            add_student(message.from_user.id, message.text, class_id)
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ!", reply_markup=get_student_keyboard())
        elif user_type == '—É—á–∏—Ç–µ–ª—å':
            with get_db_connection() as conn:
                c = conn.cursor()
                c.execute("INSERT INTO teachers (id, name) VALUES (?, ?)", 
                          (message.from_user.id, message.text))
                conn.commit()
            await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_teacher_keyboard())
        elif user_type == '—É—á–µ–Ω–∏–∫':
            await message.reply("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è.")
        
    except sqlite3.IntegrityError:
        await message.reply("–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    
    await state.clear()

# Keyboard handlers
@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    profile = get_user_profile(message.from_user.id)
    if profile:
        if profile['type'] == 'teacher':
            classes_text = "\n".join([f"üìö {name}" for _, name in profile['classes']])
            response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–ò–º—è: {profile['name']}\n–°—Ç–∞—Ç—É—Å: –£—á–∏—Ç–µ–ª—å\n\n–í–∞—à–∏ –∫–ª–∞—Å—Å—ã:\n{classes_text}"
        else:
            response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–ò–º—è: {profile['name']}\n–°—Ç–∞—Ç—É—Å: –£—á–µ–Ω–∏–∫\n–ö–ª–∞—Å—Å: {profile['class']}"
        await message.reply(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(UserStates.editing_profile)

@dp.message(UserStates.editing_profile)
async def process_profile_edit(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    update_user_profile(message.from_user.id, new_name)
    await message.reply("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

# Class management
@dp.message(F.text == "üìö –ú–æ–∏ –∫–ª–∞—Å—Å—ã")
async def show_classes(message: types.Message):
    if is_teacher(message.from_user.id):
        classes = get_teacher_classes(message.from_user.id)
        if classes:
            response = "üìö –í–∞—à–∏ –∫–ª–∞—Å—Å—ã:\n\n"
            for class_id, class_name in classes:
                students = get_class_students(class_id)
                students_text = "\n".join([f"üë§ {name}" for _, name in students])
                response += f"{class_name}\n–£—á–µ–Ω–∏–∫–∏:\n{students_text}\n\n"
            await message.reply(response, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤.")
    else:
        student_class = get_student_class(message.from_user.id)
        if student_class:
            class_name = get_class_name(student_class)
            students = get_class_students(student_class)
            response = f"üìö –í–∞—à –∫–ª–∞—Å—Å: {class_name}\n\n–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏:\n"
            response += "\n".join([f"üë§ {name}" for _, name in students])
            await message.reply(response, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞—Å—Å–µ.")
@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
async def start_submission(message: types.Message, state: FSMContext):
    student_class_id = get_student_class(message.from_user.id)
    if not student_class_id:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ.")
        return
    
    assignments = get_class_assignments(student_class_id)
    if not assignments:
        await message.reply("–í –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        return
    
    keyboard = InlineKeyboardBuilder()
    for assignment_id, text, deadline in assignments:
        if deadline is not None:
            deadline_naive = datetime.strptime(deadline, '%Y-%m-%d %H:%M')
            deadline = TIMEZONE.localize(deadline_naive)
            if datetime.now(TIMEZONE) <= deadline:
                keyboard.add(InlineKeyboardButton(
                    text=f"–ó–∞–¥–∞–Ω–∏–µ {assignment_id}",
                    callback_data=f"submit:{assignment_id}"
                ))
        else:
            keyboard.add(InlineKeyboardButton(
                text=f"–ó–∞–¥–∞–Ω–∏–µ {assignment_id}",
                callback_data=f"submit:{assignment_id}"
            ))
    keyboard.adjust(1)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", 
                        reply_markup=keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_submission)

# Assignment management
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_assignment_start(message: types.Message, state: FSMContext):
    if not is_teacher(message.from_user.id):
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return
    
    classes = get_teacher_classes(message.from_user.id)
    if not classes:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤.")
        return
    
    keyboard = InlineKeyboardBuilder()
    for class_id, class_name in classes:
        keyboard.add(InlineKeyboardButton(
            text=class_name,
            callback_data=f"class:{class_id}"
        ))
    keyboard.adjust(2)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_class_selection)

@dp.message(UserStates.waiting_for_generation_request)
async def process_generation_request(message: types.Message, state: FSMContext):
    try:
        update_api_key()  # –û–±–Ω–æ–≤–ª—è–µ–º API-–∫–ª—é—á –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        request = message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞–Ω–∏—è: {request}")
        await state.update_data(generation_request=request)

        # –ü–æ–ª—É—á–∞–µ–º class_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        class_id = data.get('class_id')
        logger.info(f"Class ID: {class_id}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
        prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {request}. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–ª–∏ —Å—Ä–æ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram.–°–æ–∑–¥–∞–π —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ—Ä–æ–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–µ –¥–∞–≤–∞–π –∑–∞–¥–∞–Ω–∏–µ –≥–¥–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–¥–∏–∞"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ AI: {prompt}")
        
        response = chat.send_message(
            prompt,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        generated_assignment = response.text
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: {generated_assignment[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(generated_assignment_text=generated_assignment)
        logger.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ",
            callback_data="select_generated_assignment"
        ))
        keyboard.add(InlineKeyboardButton(
            text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ",
            callback_data="regenerate_assignment"
        ))
        keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await message.answer("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=keyboard.as_markup())
        await message.answer(generated_assignment)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        await state.set_state(UserStates.waiting_for_generation_choice)
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_generation_choice")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.set_state(UserStates.waiting_for_generation_request)



@dp.callback_query(F.data == "select_generated")
async def process_select_generated_assignment(callback: types.CallbackQuery, state: FSMContext):
    logger.info("–§—É–Ω–∫—Ü–∏—è process_select_generated_assignment –≤—ã–∑–≤–∞–Ω–∞")
    data = await state.get_data()
    assignment_text = data.get('generated_assignment_text')
    class_id = data.get('class_id')
    
    logger.info(f"Assignment text: {assignment_text[:50] if assignment_text else None}")
    logger.info(f"Class ID: {class_id}")
    
    if not assignment_text:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not class_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∞—Å—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–¥–ª–∞–π–Ω–∞
    await state.set_state(UserStates.waiting_for_deadline_year)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    await callback.answer()
    
    
@dp.callback_query(F.data == "select_generated_assignment")
async def process_select_generated_assignment(callback: types.CallbackQuery, state: FSMContext):
    try:
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        
        data = await state.get_data()
        generated_assignment_text = data.get('generated_assignment_text')
        class_id = data.get('class_id')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: class_id={class_id}, —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è={generated_assignment_text[:50] if generated_assignment_text else None}...")

        if not generated_assignment_text or not class_id:
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ ID –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: text={bool(generated_assignment_text)}, class_id={bool(class_id)}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥ –∫–ª—é—á–æ–º 'assignment_text'
        await state.update_data(
            assignment_text=generated_assignment_text,
            selected_class_id=class_id,
        )
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–±—Ä–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω"
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω",
            callback_data="select_deadline"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è
        new_message = await callback.message.answer(
            text=generated_assignment_text,
            reply_markup=keyboard.as_markup()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(current_assignment_message_id=new_message.message_id)
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {new_message.message_id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è.")

async def delete_old_messages(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    old_assignment_message_id = data.get('old_assignment_message_id')
    old_menu_message_id = data.get('old_menu_message_id')

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    if old_assignment_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_assignment_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º: {e}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    if old_menu_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_menu_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é: {e}")

@dp.callback_query(F.data == "select_deadline")
async def process_select_deadline(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:", 
                                    reply_markup=get_calendar_keyboard(datetime.now().year, datetime.now().month))
    await state.set_state(UserStates.waiting_for_deadline_year)

@dp.callback_query(F.data == "regenerate_assignment")
async def process_regenerate_assignment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    generation_request = data.get('generation_request')
    
    # Generate new assignment by request
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {generation_request}"
    response = chat.send_message(
        prompt,
        generation_config=generation_config,
        safety_settings=safety_settings
    )
    generated_assignment = response.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(generated_assignment_text=generated_assignment)
    
    
    keyboard = InlineKeyboardBuilder()
    select_button = InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å",
        callback_data="select_generated_assignment"
    )
    generate_button = InlineKeyboardButton(
        text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        callback_data="regenerate_assignment"
    )
    

    
    keyboard.add(select_button)
    keyboard.add( generate_button)
    keyboard.adjust(2)

    # Delete old messages
    old_assignment_message_id = data.get('old_assignment_message_id')
    old_menu_message_id = data.get('old_menu_message_id')
    if old_assignment_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_assignment_message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            pass
    if old_menu_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_menu_message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            pass

    # Send new message with generated assignment
    new_message = await bot.send_message(chat_id=callback.message.chat.id, text=generated_assignment)
    
    # Store new message ID
    await state.update_data({'old_assignment_message_id': new_message.message_id})

    # Send new message with menu
    new_menu_message = await bot.send_message(chat_id=callback.message.chat.id, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=keyboard.as_markup())
    await state.update_data({'old_menu_message_id': new_menu_message.message_id})

    # Handle "–í—ã–±—Ä–∞—Ç—å" button click
    @dp.callback_query()
    async def show_deadline_button(callback_query: CallbackQuery):
        if callback_query.data == 'select_generated_assignment':
            deadline_button = InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω",
                callback_data="select_deadline"
            )
            keyboard.add(deadline_button)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard.as_markup())

    await state.set_state(UserStates.waiting_for_deadline_year)


@dp.message(UserStates.waiting_for_generation_choice)
async def process_generation_choice(message: types.Message, state: FSMContext):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:", 
                        reply_markup=get_calendar_keyboard(datetime.now().year, datetime.now().month))
    await state.set_state(UserStates.waiting_for_deadline_year)

@dp.callback_query(F.data.in_({"add_own_assignment", "generate_assignment"}))
async def process_assignment_method(callback: types.CallbackQuery, state: FSMContext):
    method = callback.data
    await state.update_data(assignment_method=method)

    if method == "add_own_assignment":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(UserStates.waiting_for_assignment)
    elif method == "generate_assignment":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(UserStates.waiting_for_generation_request)


@dp.callback_query(F.data.startswith("class:"))
async def process_class_selection(callback: types.CallbackQuery, state: FSMContext):
    class_id = callback.data.split(":")[1]
    await state.update_data(class_id=class_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        callback_data="add_own_assignment"
    ))
    keyboard.add(InlineKeyboardButton(
        text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        callback_data="generate_assignment"
    ))
    keyboard.adjust(2)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_assignment_method)

@dp.message(UserStates.waiting_for_assignment)
async def process_assignment(message: types.Message, state: FSMContext):
    assignment_text = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    await state.update_data(assignment_text=assignment_text)

    logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {assignment_text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    
    current_year = datetime.now().year
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:", 
                        reply_markup=get_calendar_keyboard(current_year, datetime.now().month))
    await state.set_state(UserStates.waiting_for_deadline_year)


@dp.callback_query(F.data.startswith("month:"))
async def process_month_selection(callback: types.CallbackQuery):
    _, year, month = callback.data.split(":")
    await callback.message.edit_reply_markup(
        reply_markup=get_calendar_keyboard(int(year), int(month))
    )


@dp.callback_query(F.data.startswith("date:"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    _, year, month, day = callback.data.split(":")
    await state.update_data(deadline_date=f"{year}-{month}-{day}")
    
    time_keyboard = InlineKeyboardBuilder()
    hours = ["09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
    for hour in hours:
        time_keyboard.add(InlineKeyboardButton(
            text=f"{hour}:00",
            callback_data=f"hour:{hour}"
        ))
    time_keyboard.adjust(3)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–µ–¥–ª–∞–π–Ω–∞:", 
                                    reply_markup=time_keyboard.as_markup())
    await state.set_state(UserStates.waiting_for_deadline_time)

@dp.callback_query(F.data.startswith("hour:"))
async def process_hour_selection(callback: types.CallbackQuery, state: FSMContext):
    hour = callback.data.split(":")[1]
    await state.update_data(deadline_hour=hour)
    
    minute_keyboard = InlineKeyboardBuilder()
    minutes = ["00", "15", "30", "45"]
    for minute in minutes:
        minute_keyboard.add(InlineKeyboardButton(
            text=minute,
            callback_data=f"minute:{minute}"
        ))
    minute_keyboard.adjust(4)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞:", 
                                    reply_markup=minute_keyboard.as_markup())

@dp.callback_query(F.data.startswith("minute:"))
async def process_time_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. Callback data: {callback.data}")
        
        minute = callback.data.split(":")[1]
        data = await state.get_data()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        
        deadline_date = data.get('deadline_date')
        deadline_hour = data.get('deadline_hour')
        selected_class_id = data.get('class_id')  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'selected_class_id' –Ω–∞ 'class_id'
        selected_assignment_text = data.get('assignment_text')  
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: date={deadline_date}, hour={deadline_hour}, class_id={selected_class_id}, text={selected_assignment_text[:50] if selected_assignment_text else None}...")
        
  
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not deadline_date:
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞.")
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞")
            return
        if not deadline_hour:
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Å –¥–µ–¥–ª–∞–π–Ω–∞.")
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Å –¥–µ–¥–ª–∞–π–Ω–∞")
            return
        if not selected_class_id:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å.")
            logger.error("–ù–µ –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å")
            return
        if not selected_assignment_text:
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è")
            return
        
        deadline_str = f"{deadline_date} {deadline_hour}:{minute}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {deadline_str}")
        
        try:
            deadline = datetime.strptime(deadline_str, '%Y-%m-%d %H:%M')
            deadline = TIMEZONE.localize(deadline)
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω: {deadline}")
        except ValueError as e:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            with get_db_connection() as conn:
                c = conn.cursor()
                c.execute("INSERT INTO assignments (class_id, text, deadline) VALUES (?, ?, ?)", 
                          (selected_class_id, selected_assignment_text, deadline.strftime('%Y-%m-%d %H:%M')))
                conn.commit()
                new_assignment_id = c.lastrowid
            logger.info(f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –ë–î: {e}")
            return
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        old_assignment_message_id = data.get('current_assignment_message_id')
        old_menu_message_id = data.get('current_menu_message_id')
        
        if old_assignment_message_id:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_assignment_message_i )
                logger.info(f"–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        
        if old_menu_message_id:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_menu_message_id)
                logger.info(f"–°—Ç–∞—Ä–æ–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ. ID: {old_menu_message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é: {e}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        try:
            new_assignment_message = await callback.message.answer(f"–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! ID: {new_assignment_id}")
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ. ID: {new_assignment_message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(current_assignment_message_id=new_assignment_message.message_id)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. current_assignment_message_id: {new_assignment_message.message_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")

@dp.callback_query(F.data.startswith("submit:"))
async def process_submission_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        assignment_id = callback.data.split(":")[1]
        await state.update_data(assignment_id=assignment_id)
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ:")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(F.text == "üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
async def show_links(message: types.Message):
    try:
        teacher_id = message.from_user.id
        
        with get_db_connection() as conn:
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª–µ–º
            c.execute("SELECT id, class_name FROM classes WHERE teacher_id = ?", (teacher_id,))
            classes = c.fetchall()
            
            if classes:
                response = "–ú–æ–∏ —Å—Å—ã–ª–∫–∏:\n\n"
                for class_id, class_name in classes:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã links –ø–æ class_id
                    c.execute("SELECT link FROM links WHERE class_id = ?", (class_id,))
                    link_results = c.fetchall()
                    
                    if link_results:
                        response += f"{class_name}:\n"
                        for link in link_results:
                            response += f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Å—É: {link[0]}\n"
                            
                    else:
                        response += f"{class_name}: –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.\n\n"
                        
                await message.reply(response)
            else:
                await message.reply("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text.startswith("/copy_"))
async def copy_link(message: types.Message):
    command, class_id = message.text.split("_", 1)
    class_id = int(class_id)
    
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT link FROM links WHERE class_id = ?", (class_id,))
        link_result = c.fetchone()
        
        if link_result:
            link = link_result[0]
            await message.reply(f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {link}")
            # –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            await message.reply("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
@dp.message(F.text == "üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def show_assignments(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    student_class_id = get_student_class(user_id)

    if not student_class_id:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ.")
        return

    assignments = get_class_assignments(student_class_id)
    total_assignments = len(assignments)

    if total_assignments == 0:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(assignments=assignments, current_page=0)
    await send_assignments_page(chat_id=message.chat.id, message_id=message.message_id, assignments=assignments, page=0)

async def send_assignments_page(callback=None, chat_id=None, message_id=None, assignments=None, page=None):
    if callback:
        chat_id = callback.message.chat.id
        message_id = callback.message.message_id
    elif chat_id and message_id and assignments and page is not None:
        pass
    else:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ page –Ω–µ None
    if page is None:
        raise ValueError("page –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")

    start_index = page * ASSIGNMENTS_PER_PAGE
    end_index = start_index + ASSIGNMENTS_PER_PAGE
    assignments_to_send = assignments[start_index:end_index]

    if not assignments_to_send:
        await bot.send_message(chat_id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return

    response = "üìù –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for assignment in assignments_to_send:
        response += f"üìö –ó–∞–¥–∞–Ω–∏–µ: {assignment[1]}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {assignment[2]}\n\n"

    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"assignments_page:{page - 1}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if end_index < len(assignments):
        keyboard.add(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"assignments_page:{page + 1}"))

    if callback:
        await bot.edit_message_text(
            text=response,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=keyboard.as_markup()
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text=response,
            reply_markup=keyboard.as_markup()
        )
@dp.callback_query(F.data.startswith("assignments_page:"))
async def process_assignments_page(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback.data
    page = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    assignments = data.get("assignments")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞–Ω–∏–π
    if assignments is None:
        await callback.answer("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0 or page >= (len(assignments) + ASSIGNMENTS_PER_PAGE - 1) // ASSIGNMENTS_PER_PAGE:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    await send_assignments_page(callback=callback, assignments=assignments, page=page)
    await callback.answer()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ callback

@dp.message(UserStates.waiting_for_submission)
async def process_submission(message: types.Message, state: FSMContext):
    data = await state.get_data()
    assignment_id = data.get('assignment_id')
    if not assignment_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if message.document:
        file_info = await bot.get_file(message.document.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª .docx
        if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ .docx —Ñ–∞–π–ª–∞
            doc = docx.Document(downloaded_file)
            answer = ''.join(p.text for p in doc.paragraphs)
        elif message.document.mime_type.startswith('text/'):
            answer = downloaded_file.read().decode('utf-8', errors='replace')
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            return
    elif message.text:
        answer = message.text
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.reply("–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç... (0/5)")

    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT text, deadline FROM assignments WHERE id = ?", (assignment_id,))
        assignment = c.fetchone()
    
    if not assignment:
        await message.reply("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    assignment_text, deadline_str = assignment
    
    prompt = f"""–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.
    –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: {assignment_text}
    –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {answer}
    
    –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    1. –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    3. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –æ—Ç 2 –±–∞–ª–ª–æ–≤    

    –î–∞–π –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10 –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏ –µ—ë.
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    –û—Ü–µ–Ω–∫–∞: X/10
    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏...
    """
    
    try:
        response = chat.send_message(
            prompt,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        # Update loading message
        await loading_message.edit_text("–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç... (1/5)")
        
        evaluation, feedback = parse_evaluation(response.text)
        
        if evaluation is None:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç AI")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()
            return
        
        # Update loading message
        await loading_message.edit_text("–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç... (2/5)")
        
        add_submission(assignment_id, message.from_user.id, answer, evaluation, feedback)
        
        # Update loading message
        await loading_message.edit_text("–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç... (3/5)")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        messages = [
            f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ü–µ–Ω—ë–Ω!\n\n–ó–∞–¥–∞–Ω–∏–µ: {assignment_text}\n",
            f"–û—Ü–µ–Ω–∫–∞: {evaluation}/10\n",
            f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {feedback}\n",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ü–µ–Ω–∫–µ!"
        ]
        
        for message_text in messages:
            await message.reply(message_text)
        
        # Update loading message
        await loading_message.edit_text("–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç... (5/5) ‚úÖ")
    except Exception as e:
        logger.error(f"Error processing submission: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return
# Class creation
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å")
async def create_class(message: types.Message, state: FSMContext):
    if not is_teacher(message.from_user.id):
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return
    
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:")
    await state.set_state(UserStates.waiting_for_class_name)

@dp.message(UserStates.waiting_for_class_name)
async def process_class_name(message: types.Message, state: FSMContext):
    class_name = message.text.strip()
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("INSERT INTO classes (teacher_id, class_name) VALUES (?, ?)", 
                  (message.from_user.id, class_name))
        class_id = c.lastrowid
        conn.commit()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        ref_link = f"https://t.me/edustud_bot?start={class_id}"
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ links
        c.execute("INSERT INTO links (class_id, link) VALUES (?, ?)", 
                  (class_id, ref_link))
        conn.commit()
    
    await message.reply("–ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω!")
    await state.clear()

# Statistics


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞")
async def show_class_statistics(message: types.Message):
    if not is_teacher(message.from_user.id):
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return
    
    classes = get_teacher_classes(message.from_user.id)
    if not classes:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤.")
        return
    
    for class_id, class_name in classes:
        try:
            stats = get_assignment_statistics(class_id)
            if stats:
                response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞ {class_name}:</b>\n\n"
                for assignment_id, text, deadline, submissions, avg_score in stats:
                    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    short_text = text[:50] + "..." if len(text) > 50 else text
                    response += f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {short_text}\n"
                    response += f"üìÖ <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n"
                    response += f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—Ç:</b> {submissions}\n"
                    if avg_score is not None:
                        response += f"üìà <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score:.1f}/10\n\n"
                    else:
                        response += "üìà <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            else:
                response = f"–í –∫–ª–∞—Å—Å–µ {class_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π."

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000
            for i in range(0, len(response), max_length):
                part = response[i:i+max_length]
                await message.answer(part, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}")
# Teacher assignments
@dp.message(F.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def show_teacher_assignments(message: types.Message, state: FSMContext):
    if not is_teacher(message.from_user.id):
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return
    
    assignments = get_teacher_assignments(message.from_user.id)
    total_assignments = len(assignments)

    if total_assignments == 0:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(assignments=assignments, current_page=0)
    await send_assignments_page(chat_id=message.chat.id, message_id=message.message_id, assignments=assignments, page=0)


# Student grades
@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤")
async def show_student_grades(message: types.Message):
    if not is_teacher(message.from_user.id):
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return
    
    classes = get_teacher_classes(message.from_user.id)
    if not classes:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤.")
        return
    
    response = "üìä –û—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º:\n\n"
    
    for class_id, class_name in classes:
        grades = get_student_grades(class_id)
        if grades:
            response += f"–ö–ª–∞—Å—Å: {class_name}\n"
            for student_name, assignment_text, evaluation in grades:
                response += f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
                response += f"üìù –ó–∞–¥–∞–Ω–∏–µ: {assignment_text}\n"
                response += f"üìà –û—Ü–µ–Ω–∫–∞: {evaluation}/10\n\n"
        else:
            response += f"–ö–ª–∞—Å—Å: {class_name}\n–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.\n\n"
    
    await message.reply(response or "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN)

# Helper functions
def get_student_grades(class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT st.name, a.text, s.evaluation
            FROM submissions s
            JOIN students st ON s.student_id = st.id
            JOIN assignments a ON s.assignment_id = a.id
            WHERE a.class_id = ?
        """, (class_id,))
        return c.fetchall()

def get_teacher_assignments(teacher_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT c.class_name, a.text, a.deadline
            FROM assignments a
            JOIN classes c ON a.class_id = c.id
            WHERE c.teacher_id = ?
            ORDER BY a.deadline
        """, (teacher_id,))
        return c.fetchall()

def get_user_profile(user_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT name FROM teachers WHERE id = ?", (user_id,))
        teacher = c.fetchone()
        if teacher:
            classes = get_teacher_classes(user_id)
            return {
                'type': 'teacher',
                'name': teacher[0],
                'classes': classes
            }
        else:
            c.execute("SELECT name, class_id FROM students WHERE id = ?", (user_id,))
            student = c.fetchone()
            if student:
                class_name = get_class_name(student[1])
                return {
                    'type': 'student',
                    'name': student[0],
                    'class': class_name
                }
    return None

def get_class_name(class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT class_name FROM classes WHERE id = ?", (class_id,))
        result = c.fetchone()
        return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å"

def update_user_profile(user_id, new_name):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("UPDATE teachers SET name = ? WHERE id = ?", (new_name, user_id))
        if c.rowcount == 0:
            c.execute("UPDATE students SET name = ? WHERE id = ?", (new_name, user_id))
        conn.commit()

def get_assignment_statistics(class_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT a.id, a.text, a.deadline,
                   COUNT(DISTINCT s.id) as submissions,
                   AVG(s.evaluation) as avg_score
            FROM assignments a
 LEFT JOIN submissions s ON a.id = s.assignment_id
            WHERE a.class_id = ?
            GROUP BY a.id
        """, (class_id,))
        return c.fetchall()

def parse_evaluation(text):
    score_match = re.search(r'–û—Ü–µ–Ω–∫–∞:\s(\d+)/10', text)
    if score_match:
        score = int(score_match.group(1))
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI")
        return None, None

    feedback_match = re.search(r'–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:(.*)', text, re.DOTALL)
    if feedback_match:
        feedback = feedback_match.group(1).strip()
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI")
        return None, None

    return score, feedback
async def schedule_results_sending(assignment_id: int, deadline: datetime):
    await asyncio.sleep((deadline - datetime.now(TIMEZONE)).total_seconds() + 5)
    await send_results_to_teacher(assignment_id)

async def send_results_to_teacher(assignment_id: int):
    results = get_assignment_results(assignment_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT c.teacher_id, c.class_name
            FROM assignments a
            JOIN classes c ON a.class_id = c.id
            WHERE a.id = ?
        """, (assignment_id,))
        result = c.fetchone()
    
    if result:
        teacher_id = result[0]
        class_name = result[1]
        
        message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞–Ω–∏—è #{assignment_id} –≤ –∫–ª–∞—Å—Å–µ {class_name}:\n\n"
        for student, result in results.items():
            message += f"–°—Ç—É–¥–µ–Ω—Ç: {student}\n"
            message += f"–û—Ü–µ–Ω–∫–∞: {result['evaluation']}/10\n"
            message += f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {result['feedback']}\n\n"
        
        try:
            await bot.send_message(teacher_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—á–∏—Ç–µ–ª—é {teacher_id}: {e}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞: –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {assignment_id}")

def get_assignment_results(assignment_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT s.student_id, st.name, s.answer, s.evaluation, s.feedback
            FROM submissions s
            JOIN students st ON s.student_id = st.id
            WHERE s.assignment_id = ?
        """, (assignment_id,))
        results = c.fetchall()
        
    formatted_results = {}
    for student_id, student_name, answer, evaluation, feedback in results:
        formatted_results[student_name] = {
            'answer': answer,
            'evaluation': evaluation,
            'feedback': feedback
        }
    
    return formatted_results

def get_teacher_id_for_assignment(assignment_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("""
            SELECT c.teacher_id
            FROM assignments a
            JOIN classes c ON a.class_id = c.id
            WHERE a.id = ?
        """, (assignment_id,))
        result = c.fetchone()
    return result[0] if result else None

async def main():
    init_db()
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    init_db()
    asyncio.run(main())
